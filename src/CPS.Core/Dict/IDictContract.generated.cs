// -----------------------------------------------------------------------
// <auto-generated>
//    此代码由代码生成器生成。
//    手动更改此文件可能导致应用程序出现意外的行为。
//    如果重新生成代码，对此文件的任何修改都会丢失。
//    如果需要扩展此类，可以遵守如下规则进行扩展：
//      1. 横向扩展：如需给当前模块添加方法接口，可新建文件“IDictContract.cs”的分部接口“public partial interface IDictContract”添加方法，并添加相应新的分部基类 abstract partial class DictServiceBase 实现新方法
// </auto-generated>
//
//  <copyright file="IDictContract.generated.cs">
//      
//  </copyright>
//  <site></site>
//  <last-editor>Jiangyimin</last-editor>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using OSharp.Data;
using OSharp.Extensions;

using CPS.Dict.Dtos;
using CPS.Dict.Entities;


namespace CPS.Dict
{
    /// <summary>
    /// 业务契约接口：字典管理模块
    /// </summary>
    public partial interface IDictContract
    {
        #region 线路类型信息业务

        /// <summary>
        /// 获取 线路类型信息查询数据集
        /// </summary>
        IQueryable<RouteType> RouteTypes { get; }

        /// <summary>
        /// 检查线路类型信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的线路类型信息编号</param>
        /// <returns>线路类型信息是否存在</returns>
        Task<bool> CheckRouteTypeExists(Expression<Func<RouteType, bool>> predicate, int id = default(int));
        
        /// <summary>
        /// 添加线路类型信息信息
        /// </summary>
        /// <param name="dtos">要添加的线路类型信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreateRouteTypes(params RouteTypeInputDto[] dtos);
            
        /// <summary>
        /// 更新线路类型信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的线路类型信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateRouteTypes(params RouteTypeInputDto[] dtos);
            
        /// <summary>
        /// 删除线路类型信息信息
        /// </summary>
        /// <param name="ids">要删除的线路类型信息编号</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> DeleteRouteTypes(params int[] ids);
        

        #endregion
        
        #region 字段输入规则信息业务

        /// <summary>
        /// 获取 字段输入规则信息查询数据集
        /// </summary>
        IQueryable<FieldInputRule> FieldInputRules { get; }

        /// <summary>
        /// 检查字段输入规则信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的字段输入规则信息编号</param>
        /// <returns>字段输入规则信息是否存在</returns>
        Task<bool> CheckFieldInputRuleExists(Expression<Func<FieldInputRule, bool>> predicate, int id = default(int));
        
        /// <summary>
        /// 添加字段输入规则信息信息
        /// </summary>
        /// <param name="dtos">要添加的字段输入规则信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreateFieldInputRules(params FieldInputRuleInputDto[] dtos);
            
        /// <summary>
        /// 更新字段输入规则信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的字段输入规则信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateFieldInputRules(params FieldInputRuleInputDto[] dtos);
            
        /// <summary>
        /// 删除字段输入规则信息信息
        /// </summary>
        /// <param name="ids">要删除的字段输入规则信息编号</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> DeleteFieldInputRules(params int[] ids);
        

        #endregion
        
        #region 人员类别信息业务

        /// <summary>
        /// 获取 人员类别信息查询数据集
        /// </summary>
        IQueryable<WorkerCategory> WorkerCategories { get; }

        /// <summary>
        /// 检查人员类别信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的人员类别信息编号</param>
        /// <returns>人员类别信息是否存在</returns>
        Task<bool> CheckWorkerCategoryExists(Expression<Func<WorkerCategory, bool>> predicate, int id = default(int));
        
        /// <summary>
        /// 添加人员类别信息信息
        /// </summary>
        /// <param name="dtos">要添加的人员类别信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreateWorkerCategories(params WorkerCategoryInputDto[] dtos);
            
        /// <summary>
        /// 更新人员类别信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的人员类别信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateWorkerCategories(params WorkerCategoryInputDto[] dtos);
            
        /// <summary>
        /// 删除人员类别信息信息
        /// </summary>
        /// <param name="ids">要删除的人员类别信息编号</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> DeleteWorkerCategories(params int[] ids);
        

        #endregion
        
        #region 车辆类型信息业务

        /// <summary>
        /// 获取 车辆类型信息查询数据集
        /// </summary>
        IQueryable<VehicleType> VehicleTypes { get; }

        /// <summary>
        /// 检查车辆类型信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的车辆类型信息编号</param>
        /// <returns>车辆类型信息是否存在</returns>
        Task<bool> CheckVehicleTypeExists(Expression<Func<VehicleType, bool>> predicate, int id = default(int));
        
        /// <summary>
        /// 添加车辆类型信息信息
        /// </summary>
        /// <param name="dtos">要添加的车辆类型信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreateVehicleTypes(params VehicleTypeInputDto[] dtos);
            
        /// <summary>
        /// 更新车辆类型信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的车辆类型信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateVehicleTypes(params VehicleTypeInputDto[] dtos);
            
        /// <summary>
        /// 删除车辆类型信息信息
        /// </summary>
        /// <param name="ids">要删除的车辆类型信息编号</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> DeleteVehicleTypes(params int[] ids);
        

        #endregion
        
        #region 物品类型信息业务

        /// <summary>
        /// 获取 物品类型信息查询数据集
        /// </summary>
        IQueryable<ArticleType> ArticleTypes { get; }

        /// <summary>
        /// 检查物品类型信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的物品类型信息编号</param>
        /// <returns>物品类型信息是否存在</returns>
        Task<bool> CheckArticleTypeExists(Expression<Func<ArticleType, bool>> predicate, int id = default(int));
        
        /// <summary>
        /// 添加物品类型信息信息
        /// </summary>
        /// <param name="dtos">要添加的物品类型信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreateArticleTypes(params ArticleTypeInputDto[] dtos);
            
        /// <summary>
        /// 更新物品类型信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的物品类型信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateArticleTypes(params ArticleTypeInputDto[] dtos);
            
        /// <summary>
        /// 删除物品类型信息信息
        /// </summary>
        /// <param name="ids">要删除的物品类型信息编号</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> DeleteArticleTypes(params int[] ids);
        

        #endregion
        
    }
}
